"use client";

import localFont from "next/font/local";
import { ChakraProvider } from "@chakra-ui/react";
import { extendTheme } from "@chakra-ui/react";
import "./globals.css";
import { UserProvider } from "@/context/context";
import { useEffect } from "react";
import { usePathname } from "next/navigation";
import "@fontsource-variable/nunito";

const breakpoints = {
  sm: "390px", // Custom Small size (e.g., 480px)
  md: "768px", // Custom Medium size (e.g., 768px)
  lg: "992px", // Custom Large size (e.g., 992px)
  xl: "1280px", // Custom Extra Large size (e.g., 1280px)
  "2xl": "1536px", // Custom Double Extra Large (e.g., 1536px)
};

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});
// const stretchPro = localFont({
//   src: "./fonts/stretch-pro.regular.otf",
//   variable: "--font-stretch-pro",
//   weight: "400 700", // Adjust weight range as necessary
// });


const theme = extendTheme({
  fonts: {
    body: "Nunito Variable, sans-serif",
    heading: "Nunito Variable, sans-serif",
    mono: "GeistMono, monospace",
    // stretch: "StretchPro, sans-serif",
  },
  breakpoints,
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function ClientLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const pathname = usePathname();

  useEffect(() => {
    // Dynamically import WebApp to avoid issues during SSR
    const loadWebApp = async () => {
      const { default: WebApp } = await import("@twa-dev/sdk");
      WebApp.enableClosingConfirmation();

      const backButton = WebApp.BackButton;
      WebApp.expand();

      if (pathname === "/") {
        backButton.hide(); // Hide back button on homepage
      } else {
        backButton.show(); // Show back button on other pages
      }

      backButton.onClick(() => {
        if (typeof window !== "undefined") {
          window.history.back();
        }
      });

      return () => {
        backButton.hide();
      };
    };

    loadWebApp().catch(console.error);
  }, [pathname]);
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable}  antialiased`}
      >
        <UserProvider>
          <ChakraProvider theme={theme}>{children}</ChakraProvider>
        </UserProvider>
      </body>
    </html>
  );
}
